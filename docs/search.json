[
  {
    "objectID": "teaching.html",
    "href": "teaching.html",
    "title": "Teaching",
    "section": "",
    "text": "You can find here my classes. Example : Basic phylogeography"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Personnal_website",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Teaching/TD_Biodiversite/biodiversity_tutorial.html",
    "href": "Teaching/TD_Biodiversite/biodiversity_tutorial.html",
    "title": "TD Biodiversité",
    "section": "",
    "text": "Afficher le code\n# For data manipulation\nlibrary(here)\nlibrary(tidyverse)\nlibrary(reshape2)\nlibrary(rentrez)\n\n# For Phylogenetics\nlibrary(ape)\nlibrary(msa)\nlibrary(phangorn)\n\n# For visualization\nlibrary(ggtree)\nlibrary(viridis)\n\n\n\n\n\n\n\nAfficher le code\nsource(here(\"functions\", \"tidy_functions.R\"))"
  },
  {
    "objectID": "Teaching/TD_Biodiversite/biodiversity_tutorial.html#chargement-des-packages",
    "href": "Teaching/TD_Biodiversite/biodiversity_tutorial.html#chargement-des-packages",
    "title": "TD Biodiversité",
    "section": "",
    "text": "Afficher le code\n# For data manipulation\nlibrary(here)\nlibrary(tidyverse)\nlibrary(reshape2)\nlibrary(rentrez)\n\n# For Phylogenetics\nlibrary(ape)\nlibrary(msa)\nlibrary(phangorn)\n\n# For visualization\nlibrary(ggtree)\nlibrary(viridis)"
  },
  {
    "objectID": "Teaching/TD_Biodiversite/biodiversity_tutorial.html#chargement-des-fonctions-externes",
    "href": "Teaching/TD_Biodiversite/biodiversity_tutorial.html#chargement-des-fonctions-externes",
    "title": "TD Biodiversité",
    "section": "",
    "text": "Afficher le code\nsource(here(\"functions\", \"tidy_functions.R\"))"
  },
  {
    "objectID": "Teaching/TD_Biodiversite/biodiversity_tutorial.html#chargement-des-données",
    "href": "Teaching/TD_Biodiversite/biodiversity_tutorial.html#chargement-des-données",
    "title": "TD Biodiversité",
    "section": "Chargement des données",
    "text": "Chargement des données\nCharger le fichier data/usflu.annot.csv avec la fonction read_csv() et le visualiser. (5 min)\n\n\nAfficher le code\nannotations &lt;- read_csv(\n  file           = here(\"data\", \"usflu.annot.csv\"),\n  show_col_types = FALSE\n) |&gt; select(c(-1))\nview(annotations)\n\n\nAller sur GenBank et entrer un numéro d’accès dans la barre de recherche. À quoi correspond-t-elle ?\nPourquoi l’indication “Segment 4” ?\nÀ quoi correspond la protéine codée par ce gène ? Quel est le rapport avec le nom du variant ?\nPouvez-vous faire des prédictions sur l’évolution de ces séquences ? (10 min)"
  },
  {
    "objectID": "Teaching/TD_Biodiversite/biodiversity_tutorial.html#récupération-des-séquences-par-lot",
    "href": "Teaching/TD_Biodiversite/biodiversity_tutorial.html#récupération-des-séquences-par-lot",
    "title": "TD Biodiversité",
    "section": "Récupération des séquences par lot",
    "text": "Récupération des séquences par lot\nNous allons télécharger les séquences correspondantes depuis Genbank avec le package rentrez (ne pas faire tourner le bloc sauf avec une bonne connexion internet).\n\n\nAfficher le code\nannotations |&gt;\n  mutate(\"sequences\" = Vectorize(Get_sequence)(accession)) |&gt; \n  select(c(accession, sequences)) |&gt; \n  write_to_fasta(path = here(\"output\", \"usflu_sequences.fasta\"))"
  },
  {
    "objectID": "Teaching/TD_Biodiversite/biodiversity_tutorial.html#génération-de-la-matrice-de-distances",
    "href": "Teaching/TD_Biodiversite/biodiversity_tutorial.html#génération-de-la-matrice-de-distances",
    "title": "TD Biodiversité",
    "section": "Génération de la matrice de distances",
    "text": "Génération de la matrice de distances\nNous allons générer une matrice des distances à partir de nos alignements à l’aide la fonction dist.dna(). Ouvrir l’aide de cette fonction.\nCombien de modèles de substitution sont disponibles ? Comparer à la fonction dist.ml(). Aller sur ce lien (et celui-ci pour approfondir) et regarder les différents modèles.\nQuelles sont les différences entre ces modèles ? Nous allons utiliser le modèle TN93, pourquoi ce nom ? Quelles sont ses particularités ? (5 min)\nUtiliser la fonction dist.dna() pour générer une matrice de distance.\n\n\nAfficher le code\n# alignment_BIN &lt;- adegenet::fasta2DNAbin(here(\"output\", \"alignment.fa\"))\nalignment_BIN &lt;- alignment |&gt; msaConvert(type = \"ape::DNAbin\") \ndistance_matrix &lt;- alignment_BIN |&gt;\n  dist.dna(model = \"TN93\")\n\n\nNous allons visualiser la matrice de distance avec ggplot. Décrire la structure de cette portion de code. (5 min)\n\n\nAfficher le code\ndistance_matrix |&gt;\n  as.matrix() |&gt; melt() |&gt;\n  ggplot(mapping = aes(x = Var1, y = Var2, fill = value)) +\n  geom_raster() +\n  scale_fill_viridis() +\n  ggtitle(\"Heatmap de la matrice des distances\") +\n  theme(\n    axis.title = element_blank()\n  )\n\n\n\n\n\n\n\n\n\nPourquoi les valeurs en diagonale de la matrice sont nulles ? Identifiez-vous des tendances ? (5 min)"
  },
  {
    "objectID": "Teaching/TD_Biodiversite/biodiversity_tutorial.html#génération-et-visualisation-de-larbre-par-upgma",
    "href": "Teaching/TD_Biodiversite/biodiversity_tutorial.html#génération-et-visualisation-de-larbre-par-upgma",
    "title": "TD Biodiversité",
    "section": "Génération et visualisation de l’arbre par UPGMA",
    "text": "Génération et visualisation de l’arbre par UPGMA\nGénérer et visualiser un arbre avec l’algorithme UPGMA à l’aide des fonction upgma() et plot(). Commenter cet arbre. (5 min)\n\n\nAfficher le code\nUPGMA_tree &lt;- upgma(distance_matrix)\nplot(UPGMA_tree, main = \"Arbre UPGMA\", cex = .6)\n\n\n\n\n\n\n\n\n\nAfficher le code\n# ggtree(UPGMA_tree) + geom_tiplab() + ggtitle(\"Arbre UPGMA\")"
  },
  {
    "objectID": "Teaching/TD_Biodiversite/biodiversity_tutorial.html#génération-de-larbre-par-neighbour-joining",
    "href": "Teaching/TD_Biodiversite/biodiversity_tutorial.html#génération-de-larbre-par-neighbour-joining",
    "title": "TD Biodiversité",
    "section": "Génération de l’arbre par Neighbour-Joining",
    "text": "Génération de l’arbre par Neighbour-Joining\nOuvrir l’aide de la fonction NJ(). Générer l’arbre et le visualiser avec la fonction plot().\n\n\nAfficher le code\nNJ_tree &lt;- distance_matrix |&gt; NJ()\nplot(NJ_tree)\n\n\n\n\n\n\n\n\n\nNous allons en profiter pour explorer la structure des arbres phylogénétiques en tant qu’objet sur R.\nPour commencer, explorer la structure de l’objet NJ_tree à l’aide de la fonction class() et de l’opérateur $\nLire la documentation de la fonction read.tree.\nEnregistrer l’arbre dans un fichier .txt à l’aide de la fonction ape::write.tree(). Comment est structuré ce fichier texte ?\nUtiliser les fonctions plot() et nodelabel() pour afficher l’arbre et les numéros des nœuds. (10 min)\n\n\nAfficher le code\nclass(NJ_tree)\n\n\n[1] \"phylo\"\n\n\nAfficher le code\nNJ_tree\n\n\n\nPhylogenetic tree with 80 tips and 78 internal nodes.\n\nTip labels:\n  CY013200, CY013781, CY012128, CY013613, CY012160, CY012272, ...\n\nUnrooted; includes branch lengths.\n\n\nAfficher le code\nNJ_tree |&gt; ape::write.tree(here(\"output\", \"NJ_tree.txt\"))\nplot(NJ_tree, cex = .6)\nnodelabels(frame = \"none\", cex = .6)\n\n\n\n\n\n\n\n\n\nNous allons voir comment visualiser ce même arbre en utilisant le package ggtree.\nCommenter le bloc de code suivant. Cette représentation vous semble-t-elle pertinente pour cette méthode ? (5 min)\n\n\nAfficher le code\nggtree(NJ_tree) + geom_tiplab() + geom_nodelab() + ggtitle(\"NJ non raciné\")\n\n\n\n\n\n\n\n\n\nAjoutons des annotations à cet arbre :\n\n\nAfficher le code\nggtree(NJ_tree, layout = \"circular\") %&lt;+% annotations +\n  geom_tiplab(aes(color = year)) +\n  scale_color_viridis(option = \"turbo\") +\n  ggtitle(\"NJ non raciné\") +\n  theme(legend.position = \"right\")\n\n\n\n\n\n\n\n\n\nA quoi correspondent les couleurs des feuilles de l’arbre ?\nNous allons raciner l’arbre de manière arbitraire. À partir de la figure précédente, quelle séquence vous semble pertinente pour raciner l’arbre ?\nRaciner l’arbre à l’aide de la fonction root(). (5 min)\n\n\n\nAfficher le code\nNJ_tree_rooted &lt;- NJ_tree |&gt; root(outgroup = \"CY012128\") |&gt; ladderize()\nggtree(NJ_tree_rooted) %&lt;+% annotations +\n  geom_tiplab(aes(color = year)) +\n  scale_color_viridis(option = \"turbo\") +\n  ggtitle(\"NJ raciné\") +\n  theme(legend.position = \"right\") +\n  geom_rootedge(rootedge = .01) +\n  theme_tree2()\n\n\n! The tree contained negative edge lengths. If you want to ignore the edges,\nyou can set `options(ignore.negative.edge=TRUE)`, then re-run ggtree.\n\n\n\n\n\n\n\n\n\nCommenter cet arbre. (5 min)"
  },
  {
    "objectID": "Teaching/TD_Biodiversite/biodiversity_tutorial.html#quelle-méthode-choisir",
    "href": "Teaching/TD_Biodiversite/biodiversity_tutorial.html#quelle-méthode-choisir",
    "title": "TD Biodiversité",
    "section": "Quelle méthode choisir ?",
    "text": "Quelle méthode choisir ?\nOn va se servir de la matrice de distance d’origine pour tester l’adéquation de la méthode choisie pour reconstruire l’arbre aux données de départ.\n\n\nAfficher le code\ndata_NJ &lt;- data.frame(\n    x = as.vector(distance_matrix),\n    y = NJ_tree_rooted |&gt; cophenetic() |&gt; as.dist() |&gt; as.vector()\n)\n\ncorcoeff &lt;- cor(data_NJ$x, data_NJ$y)^2\n\nggplot(data = data_NJ, mapping = aes(x = x, y = y)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", color = \"red\", size = .8) +\n  annotate(\"text\", x = .025, y = .055, color = \"red\",\n    label = paste0(\"Coefficient de correlation = \", as.character(corcoeff))) +\n  ggtitle(\"Est-ce que le NJ est approprié ?\") +\n  xlab(\"Distances par paires d'origine\") +\n  ylab(\"Distances par paires de l'arbre\") +\n  theme_bw()\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nLire l’aide de la fonction cophenetic(). Quelle valeur calcule-t-elle ? Quel type d’objet renvoie-t-elle ?\nQue représente ce graphique ? Comment l’interpréter ?\nComment est calculé le coefficient de corrélation ? (10 min)\n\nRecommençons avec l’arbre généré par UPGMA :\n\n\nAfficher le code\ndata_UPGMA &lt;- data.frame(\n    x = as.vector(distance_matrix),\n    y = UPGMA_tree |&gt; cophenetic() |&gt; as.dist() |&gt; as.vector()\n)\nggplot(\n  data = data_UPGMA,\n  mapping = aes(x = x, y = y)\n) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"red\") +\n  ggtitle(\"Est-ce que l'UPGMA est appropriée ?\") +\n  xlab(\"Distances par paires d'origine\") +\n  ylab(\"Distances par paires de l'arbre\") +\n  theme_bw()\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nAfficher le code\ncor(data_UPGMA$x, data_UPGMA$y)^2\n\n\n[1] 0.7393009\n\n\nQu’en concluez-vous sur cette méthode par rapport au Neighbour-Joining ? (5 min)"
  },
  {
    "objectID": "Teaching/TD_Biodiversite/biodiversity_tutorial.html#bootstrap",
    "href": "Teaching/TD_Biodiversite/biodiversity_tutorial.html#bootstrap",
    "title": "TD Biodiversité",
    "section": "Bootstrap",
    "text": "Bootstrap\nRappeler le principe du Bootstrap.\nÀ quoi sert-il dans ce contexte ? (5 min)\n\nCalcul des valeurs de Bootstrap\nNous allons générer les indices de bootstrap pour chaque nœud de l’arbre.\nCommenter le bloc de code suivant :\n\n\nAfficher le code\nbootstrap_rooted_NJ &lt;- boot.phylo(\n  NJ_tree_rooted,\n  alignment_BIN,\n  \\(x) {x |&gt;\n      dist.dna(model = \"TN93\") |&gt;\n      nj() |&gt; \n      root(outgroup = \"CY012128\")\n  }\n)\n\n\n\nRunning bootstraps:       100 / 100\nCalculating bootstrap values... done.\n\n\nAfficher le code\nNJ_tree_rooted$node.label &lt;- bootstrap_rooted_NJ\n\n\n\n\nImpression de l’arbre bootstrappé\nNous allons afficher l’arbre précédent avec les valeurs de bootstrap que nous venons de calculer :\n\n\nAfficher le code\noptions(ignore.negative.edge=TRUE)\nggtree(NJ_tree_rooted) %&lt;+% annotations +\n  geom_tiplab(aes(color = year)) +\n  scale_color_viridis(option = \"turbo\") +\n  geom_label2(\n    aes(\n      subset = !isTip,\n      label = label,\n    )\n  ) +\n  ggtitle(\"NJ raciné avec Bootstrap\") +\n  theme(legend.position = \"right\") +\n  geom_rootedge(rootedge = .01) +\n  theme_tree2()\n\n\n\n\n\n\n\n\n\nCommenter cet arbre. Comment améliorer cet arbre en considérant les valeurs de bootstrap ? (5 min)\n\n\nOn retire les noeuds faibles\nCommenter le bloc de code suivant :\n\n\nAfficher le code\nNJ_tree_rooted_collapsed &lt;- NJ_tree_rooted\ntoCollapse &lt;- match(\n  which(bootstrap_rooted_NJ &lt; 70) + length(NJ_tree_rooted$tip.label),\n NJ_tree_rooted$edge[, 2]\n)\nNJ_tree_rooted_collapsed$edge.length[toCollapse] &lt;- 0\nNJ_tree_rooted_collapsed &lt;- di2multi(NJ_tree_rooted_collapsed, tol = 0.00001)\n\n\nAffichons notre nouvel arbre :\n\n\nAfficher le code\nggtree(NJ_tree_rooted_collapsed) %&lt;+% annotations +\n  geom_tiplab(aes(color = year)) +\n  scale_color_viridis(option = \"turbo\") +\n  geom_label2(\n    aes(\n      subset = !isTip,\n      label = label,\n    )\n  ) +\n  ggtitle(\"NJ raciné avec Bootstrap et sans les noeuds faibles\") +\n  theme(legend.position = \"right\") +\n  geom_rootedge(rootedge = .01) +\n  theme_tree2()\n\n\n\n\n\n\n\n\n\nLe comparer au précédent, comment a-t-il été modifié ? (5 min)"
  },
  {
    "objectID": "Teaching/TD_Biodiversite/biodiversity_tutorial.html#conversion-de-lalignement-dans-le-format-phydat",
    "href": "Teaching/TD_Biodiversite/biodiversity_tutorial.html#conversion-de-lalignement-dans-le-format-phydat",
    "title": "TD Biodiversité",
    "section": "Conversion de l’alignement dans le format phyDat",
    "text": "Conversion de l’alignement dans le format phyDat\n\n\nAfficher le code\n# alignment_phyDat &lt;- read.phyDat(\n#   file = here(\"output\", \"alignment.fa\"),\n#   format = \"fasta\"\n# )\nalignment_phyDat &lt;- alignment |&gt; msaConvert(type = \"phangorn::phyDat\")\nclass(alignment_phyDat)\n\n\n[1] \"phyDat\""
  },
  {
    "objectID": "Teaching/TD_Biodiversite/biodiversity_tutorial.html#génération-de-larbre-initial",
    "href": "Teaching/TD_Biodiversite/biodiversity_tutorial.html#génération-de-larbre-initial",
    "title": "TD Biodiversité",
    "section": "Génération de l’arbre initial",
    "text": "Génération de l’arbre initial\nGénérons un arbre par Neighbour-Joining qui permettra d’initialiser l’algorithme de maximum de parcimonie.\n\n\nAfficher le code\nMP_tree_init &lt;- alignment_BIN |&gt; dist.dna(model = \"TN93\") |&gt; NJ()"
  },
  {
    "objectID": "Teaching/TD_Biodiversite/biodiversity_tutorial.html#génération-de-larbre-le-plus-parcimonieux",
    "href": "Teaching/TD_Biodiversite/biodiversity_tutorial.html#génération-de-larbre-le-plus-parcimonieux",
    "title": "TD Biodiversité",
    "section": "Génération de l’arbre le plus parcimonieux",
    "text": "Génération de l’arbre le plus parcimonieux\nUtiliser la fonction parcimony() pour calculer le score de parcimonie de l’arbre initial.\n\n\nAfficher le code\nparsimony(MP_tree_init, alignment_phyDat)\n\n\n[1] 422\n\n\nUtiliser la fonction optim.parsimony() pour générer l’arbre le plus parcimonieux.\n\n\nAfficher le code\nMP_tree &lt;- optim.parsimony(MP_tree_init, alignment_phyDat)\n\n\nFinal p-score 420 after  2 nni operations \n\n\nAfficher le code\nrm(MP_tree_init)\nMP_tree\n\n\n\nPhylogenetic tree with 80 tips and 76 internal nodes.\n\nTip labels:\n  CY013200, CY013781, CY012128, CY013613, CY012160, CY012272, ...\n\nUnrooted; no branch lengths.\n\n\nComparer les scores de parcimonie des deux arbres.\n\n\nAfficher le code\nggtree(MP_tree, layout = \"circular\") %&lt;+% annotations +\n  geom_tiplab(aes(color = year)) +\n  scale_color_viridis(option = \"turbo\") +\n  ggtitle(\"Arbre maximum de parcimonie\") +\n  theme(legend.position = \"right\")\n\n\n\n\n\n\n\n\n\nCommenter l’arbre généré.\nComment expliquer la similarité avec les arbres précédents ? (10 min)"
  },
  {
    "objectID": "Teaching/TD_Biodiversite/biodiversity_tutorial.html#initialisation",
    "href": "Teaching/TD_Biodiversite/biodiversity_tutorial.html#initialisation",
    "title": "TD Biodiversité",
    "section": "Initialisation",
    "text": "Initialisation\nSimilairement à la méthode du maximum de parcimonie, la méthode doit être initialisée avec un arbre :\n\n\nAfficher le code\nML_tree_init &lt;- alignment_BIN |&gt; dist.dna(model = \"TN93\") |&gt; NJ()\n\n\n\nCalcul de la vraisemblance de l’arbre initial\nUtiliser la fonction pml() pour calculer la vraisemblance de l’arbre initial avec le paramètre k = 4. Ce paramètre décrit le nombre de classes de vitesses évolutives utilisées dans le modèle, la valeur k = 4 est une valeur par défaut courante.\n\n\nAfficher le code\npml(ML_tree_init, alignment_phyDat, k = 4)\n\n\nmodel: JC+G(4) \nloglikelihood: -5641.785 \nunconstrained loglikelihood: -4736.539 \nDiscrete gamma model\nNumber of rate categories: 4 \nShape parameter: 1 \n\nRate matrix:\n  a c g t\na 0 1 1 1\nc 1 0 1 1\ng 1 1 0 1\nt 1 1 1 0\n\nBase frequencies:  \n   a    c    g    t \n0.25 0.25 0.25 0.25 \n\n\nLa fonction a bien tourné mais elle est sensible à la nature des données, on va donc vérifier que le jeu de données est bien propre :\n\n\nAfficher le code\nalignment_phyDat |&gt; as.character() |&gt; table()\n\n\n\n    -     a     c     g     k     m     r     s     t     w \n  147 45595 27170 30613     1     2     1     1 32549     1 \n\n\nCertains caractères de nos séquences ne correspondent pas aux bases azotées traditionnelles !\nLire cette page et identifier à quoi correspondent les lettres différentes de a, t, c et g. À quoi correspondent les '-' ? (5 min).\n\nEnregistrons leur position dans un objet :\n\n\nAfficher le code\nna.posi &lt;- which(\n  apply(\n    as.character(alignment_BIN),\n    2,\n    \\(x) any(!x %in% c(\"a\",\"t\",\"g\",\"c\"))\n  )\n)\n\n\nVoyons la distribution de ces lettres :\nCommenter le bloc ce code ci-après. (5 min)\n\n\nAfficher le code\napply(\n  as.character(alignment_BIN),\n  2,\n  \\(x) sum(!x %in% c(\"a\",\"t\",\"g\",\"c\"))\n) |&gt;\n  plot(\n    type = \"l\",\n    col  = \"blue\",\n    xlab = \"Position in HA segment\",\n    ylab = \"Number of NAs\"\n  )\n\n\n\n\n\n\n\n\n\nRetirons les lettres différentes de a, t, c et g et vérifions que ça a bien fonctionné :\n\n\nAfficher le code\nalignment_cropped &lt;- alignment_BIN[, -na.posi]\nalignment_cropped |&gt; as.character() |&gt; table()\n\n\n\n    a     c     g     t \n43402 25104 28828 30346 \n\n\nReconvertissons le jeu de donné trié au bon format :\n\n\nAfficher le code\nalignment_cropped_phyDat &lt;- as.phyDat(alignment_cropped)\n\n\nRegénérer l’arbre d’initialisation avec notre jeu de donnée nettoyé. (5 min)\n\n\nAfficher le code\nML_tree_init &lt;- alignment_cropped |&gt; dist.dna(model = \"TN93\") |&gt; NJ()\nML_tree_init_L &lt;- pml(ML_tree_init, alignment_cropped_phyDat, k = 4)\nML_tree_init_L\n\n\nmodel: JC+G(4) \nloglikelihood: -5184.119 \nunconstrained loglikelihood: -4043.367 \nDiscrete gamma model\nNumber of rate categories: 4 \nShape parameter: 1 \n\nRate matrix:\n  a c g t\na 0 1 1 1\nc 1 0 1 1\ng 1 1 0 1\nt 1 1 1 0\n\nBase frequencies:  \n   a    c    g    t \n0.25 0.25 0.25 0.25"
  },
  {
    "objectID": "Teaching/TD_Biodiversite/biodiversity_tutorial.html#génération-de-larbre-le-plus-vraisemblable",
    "href": "Teaching/TD_Biodiversite/biodiversity_tutorial.html#génération-de-larbre-le-plus-vraisemblable",
    "title": "TD Biodiversité",
    "section": "Génération de l’arbre le plus vraisemblable",
    "text": "Génération de l’arbre le plus vraisemblable\nUtiliser la fonction optim.pml() pour générer l’arbre optimal avec les paramètres model = \"GTR\", inv = .2,optNni = TRUE, optBf = TRUE, optQ = TRUE, optGamma = TRUE, ce qui correspond à un modèle GTR + G(4) + I (Generalised time reversible + Gamma(4) + Invariants) très standard pour ce genre d’application. Il est également possible d’utiliser la fonction modelTest() pour choisir un modèle approprié automatiquement.\n\n\nAfficher le code\nML_tree &lt;- optim.pml(\n  ML_tree_init_L,\n  model    = \"GTR\",\n  inv      = .2,\n  optNni   = TRUE,\n  optBf    = TRUE,\n  optQ     = TRUE,\n  optGamma = TRUE\n)\n\n\noptimize edge weights:  -5139.288 --&gt; -5121.539 \noptimize base frequencies:  -5121.539 --&gt; -5121.31 \noptimize rate matrix:  -5121.31 --&gt; -4933.863 \noptimize shape parameter:  -4933.863 --&gt; -4919.639 \noptimize edge weights:  -4919.639 --&gt; -4919.323 \noptimize topology:  -4919.323 --&gt; -4916.185  NNI moves:  2 \noptimize base frequencies:  -4916.185 --&gt; -4915.89 \noptimize rate matrix:  -4915.89 --&gt; -4915.868 \noptimize shape parameter:  -4915.868 --&gt; -4915.868 \noptimize edge weights:  -4915.868 --&gt; -4915.867 \noptimize topology:  -4915.867 --&gt; -4915.867  NNI moves:  0 \noptimize base frequencies:  -4915.867 --&gt; -4915.866 \noptimize rate matrix:  -4915.866 --&gt; -4915.866 \noptimize shape parameter:  -4915.866 --&gt; -4915.866 \noptimize edge weights:  -4915.866 --&gt; -4915.866 \noptimize base frequencies:  -4915.866 --&gt; -4915.866 \noptimize rate matrix:  -4915.866 --&gt; -4915.866 \noptimize shape parameter:  -4915.866 --&gt; -4915.866 \noptimize edge weights:  -4915.866 --&gt; -4915.866 \n\n\nAfficher le code\nML_tree\n\n\nmodel: GTR+G(4) \nloglikelihood: -4915.866 \nunconstrained loglikelihood: -4043.367 \nDiscrete gamma model\nNumber of rate categories: 4 \nShape parameter: 0.2829869 \n\nRate matrix:\n          a          c         g          t\na 0.0000000  2.3834491 8.2951462  0.8556857\nc 2.3834491  0.0000000 0.1486637 10.0773098\ng 8.2951462  0.1486637 0.0000000  1.0000000\nt 0.8556857 10.0773098 1.0000000  0.0000000\n\nBase frequencies:  \n        a         c         g         t \n0.3416376 0.1953256 0.2243397 0.2386970 \n\n\nComparons notre arbre optimal avec l’arbre initial généré par Neighbour-Joining :\n\n\nAfficher le code\nanova(ML_tree_init_L, ML_tree)\n\n\nLikelihood Ratio Test Table\n  Log lik.  Df Df change Diff log lik. Pr(&gt;|Chi|)    \n1  -5184.1 158                                       \n2  -4915.9 166         8        536.51  &lt; 2.2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nAfficher le code\nAIC(ML_tree_init_L, ML_tree)\n\n\n                df      AIC\nML_tree_init_L 158 10684.24\nML_tree        166 10163.73\n\n\nLire l’aide de la fonction AIC. À quoi sert l’indice d’Akaike ? (5 min) Affichons notre super arbre !\n\n\nAfficher le code\nML_tree_rooted &lt;- ML_tree$tree |&gt; root(outgroup = \"CY012128\") |&gt; ladderize()\nggtree(ML_tree_rooted) %&lt;+% annotations +\n  geom_tiplab(aes(color = year)) +\n  scale_color_viridis(option = \"turbo\") +\n  geom_label2(\n    aes(\n      subset = !isTip,\n      label = label,\n    )\n  ) +\n  ggtitle(\"Maximum de vraisemblance\") +\n  theme(legend.position = \"right\") +\n  geom_rootedge(rootedge = .01) +\n  theme_tree2()"
  }
]